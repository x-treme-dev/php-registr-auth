Прописать в /opt/lampp/etc/extra/htdpd-vhosts.conf

<VirtualHost 127.0.0.7:80>
   DocumentRoot "/opt/lampp/htdocs/php-register-auth-with-group-users"
   DirectoryIndex index.php

  <Directory "/opt/lampp/hdocs/php-register-auth-with-group-users">
  Options All
  AllowOverride All
  Require all granted
  </Directory>
</VirtualHost>

Перезапустить сервер sudo /opt/lampp/lampp restart

ПРАКТИКА - АВТОРИЗАЦИЯ И РЕГИСТРАЦИЯ С ГРУППАМИ ПОЛЬЗОВАТЕЛЕЙ (на сессиях)
Построим каркас приложения, мини фреймворк

Вот простейший вариант построения приложений на php:
Есть несколько страниц
index.php - home page
login.php - sign in
blog.php - articles
Вышеперечисленные html-страницы состоят из блоков, которые хранятся 
в директории includes: header, inner, footer

Теперь можно открыть в браузере
http://domain.com/blog.php и получить страницу или передать параметры,

чтобы вывести конкретный пост
http://domain.com/article?id=3 

Но мы избавимся от этой устаревшей системы и сделаем следующее.
Будет файл index.php, который будет принимать все запросы
и открывать ту или иную страницу, обрабатывая запросы:
либо /login, 
либо /blog
При таком подходе меняется вид URL
http://domain.com/blog
или чтобы вывести конкретный пост
http://domain.com/article/3
Это ЧПУ - человекопонятный URL, так работают и фрейворки
на шаблоне MVC.

Данные проект будет реализван через ООП. 
План:
1. Создать страницы для get-запросов
/login - sign in
/register - sign up
2. Создать страницы для post-запросов и отправки форм
/auth/login 
3. Создать страницу, доступную только админу
/dashboard
4. Создать страницу, доступную админу и пользователю
/profile

Ход работы:
1. Создать index.php в корне проекта
2. Создать .htacces в корне проекта
2.1 Теперь все запросы странц в браузере передадресуются на index.php и передается в index.php 
через параметр q (указан в .htaccess) в качестве get-параметра, т.е все, то что передается 
после слеша, когда заканчивается доменное имя.
2.2 Получив имя страницы, переадресуем на нее
3. Установить composer. Или удостовериться, что он установлен composer -v 
4. В корне проекта создат composer.json
4.1 В composer.json указать стандарт psr-4 
и пространство имен с директрорией для хранения файлов с классами app/
5. Через composer установить composer dump-autoload -o 
5.1 Этой командой устанавливаются все зависимости composer'a в папке vendor,
а также инициализируются все классы, которые находятся в папке App\\, в классы
будут автоматически прописываться пространство имен.
6. Прикрепить файл autoloader к index.php
7. Создать свой роутинг
7.1 Создать в корне папку router
7.1 Создать файл routes.php в папке router. В файле будет содержаться список роутов, 
зарегистрированных в нашей системе. Будет функция с 2-мя параметрами. 
1-й параметр - запрашиваемая страница
2-й параметр - файл страницы в системе, который система предоставит
Создав такую систему роутинга, мы будем принимать запрос на выдачу страницы и 
запуск того или иного экшена
8.Для этого в директории app создать папку Services. 
8.1 В app/Sevices создать класс Router.php
8.2 В index.php вызвать класс Router, указав пространство имен
9. В router/routes.php вызвать класс Router и через функцию page
определить, что по идентификатору uri '/test' будет открываться страница test и т.д.
10. Создать в корне проекта views/pages, где будут храниться страницы
11. Первая страница во views/pages/test.php 
12. Вывести страницу по get-запросу через адресную строку браузера, используя функцию enable

Общая структура проекта:
app/Services/Router.php - класс со статическими методами, вызывается в router/routes.php
router/routes.php - вызов и инициализация функций, вызывается в index.php
vendor - директория composer'a должен работать autoload, но не работает
views/pages/test.php - шаблоны представлений
.htaccess - настройка сервера, перехват запросов
index.php - подключение файлов, пути к файлам будут относительно index.php
note.txt - заметки
composer.json - файл указывает на пространство имен

13. Мы создали систему, где регистрируются страницы (в router/routes.php)
и потом открываются через браузер по get-запросу
14. Теперь создадим страницы:
login
15. Разделим шаблоны на части
15.1 Создать директорию views/components/ c 
файлами head.php и navbar.php
15.2 head.php с заголовками 
15.3 navbar.php с верхним меню
16. Добавить части шаблонов в страницы login.php и 404.php
17. Или сделать тоже самое через класс app/Services/Page.php и функцию part()
18. Вызвать класс Page в шаблонах 
19. Создать страницу регистрации /views/pages/register.php
20. Создать главную страницу "home" c путем '/'
46:41 



